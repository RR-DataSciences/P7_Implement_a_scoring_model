# Workflow to access AWS resources when the workflow is linked to a branch
name: Déploiement sur EC2 AWS
on:
  push:
    branches:
      - master
env:
  AWS_REGION : eu-west-1
  AWS_EC2 : ec2-3-249-6-91.eu-west-1.compute.amazonaws.com
  GITHUB_REPO : https://github.com/RR-DataSciences/P7_Implement_a_scoring_model
# permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout
jobs:
  MajPullOnEC2:
    runs-on: ubuntu-latest
    steps:
      - name: Git clone the repository
        uses: actions/checkout@v4
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::010526279977:role/GitHubAction-AssumeRoleWithAction
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}
      # Hello from AWS: WhoAmI
      - name: Sts GetCallerIdentity
        run: |
          aws sts get-caller-identity
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan ${{ env.AWS_EC2 }} >> ~/.ssh/known_hosts
      - name: Connect & Execute commands on EC2
        run: | 
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@${{ env.AWS_EC2 }} << EOF
          # Ajoutez ici d'autres commandes à exécuter sur l'EC2
          # cd ~
          # ls
          # pwd
          # cd /P7_Implement_a_scoring_model
          ls
          cd ~/P7_Implement_a_scoring_model &&  git pull ${{ env.GITHUB_REPO }}

          # Installer les dépendances
          pip install -r requirements.txt

          # Installer Gunicorn et Nginx
          # sudo yum install -y nginx
          # pip install gunicorn

          # # Configurer Nginx
          # sudo tee /etc/nginx/conf.d/p7_scoring_model.conf > /dev/null <<EOL
          # server {
          #     listen 80;
          #     server_name _;

          #     location / {
          #         proxy_pass http://127.0.0.1:8000;
          #         proxy_set_header Host \$host;
          #         proxy_set_header X-Real-IP \$remote_addr;
          #         proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
          #         proxy_set_header X-Forwarded-Proto \$scheme;
          #     }
          # }
          # EOL
          
          # sudo systemctl enable nginx
          # sudo systemctl restart nginx

          # # Exporter la variable d'environnement FLASK_APP et démarrer Gunicorn
          # export FLASK_APP=./P7_Implement_a_scoring_model/API/app.py
          # gunicorn -w 4 -b 127.0.0.1:8000 API.app:app --daemon

          # Test unitaire

          EOF